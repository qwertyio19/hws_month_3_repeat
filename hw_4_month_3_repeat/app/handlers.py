from aiogram import types, F, Router
from aiogram.filters import CommandStart
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
import smtplib
import logging
import re
from email.message import EmailMessage
from config import smtp_sender, smtp_password
from app.db import cursor, conn
from app.keyboards import start_keyboard, sender_message_keyboard


def is_valid_email(email: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º email."""
    email_regex = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    return re.match(email_regex, email) is not None


def is_non_empty_text(text: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Ç–µ–∫—Å—Ç –Ω–µ –ø—É—Å—Ç–æ–π."""
    return bool(text.strip())


logging.basicConfig(
    filename="email_log.txt",
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s"
)

def log_email(recipient, status):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–∏—Å–µ–º."""
    logging.info(f"Recipient: {recipient} | Status: {status}")


def log_email_to_db(sender_email, recipient_email, status):
    """–ó–∞–ø–∏—Å—å –ª–æ–≥–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–∏—Å–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    cursor.execute(
        """
        INSERT INTO email_logs (sender_email, recipient_email, status)
        VALUES (?, ?, ?)
        """,
        (sender_email, recipient_email, status)
    )
    conn.commit()


class SendMessage(StatesGroup):
    sender_email = State()
    recipient = State()
    subject = State()
    sender_message = State()


router = Router()


@router.message(CommandStart())
async def start(message: types.Message):
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ email.",
        reply_markup=start_keyboard
    )


@router.message(F.text == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—èüí¨")
async def send_message(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π email.")
    await state.set_state(SendMessage.sender_email)


@router.message(SendMessage.sender_email)
async def sender(message: types.Message, state: FSMContext):
    if not is_valid_email(message.text):
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å.")
        return

    await state.update_data(sender_email=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ email –ø–æ–ª—É—á–∞—Ç–µ–ª—è.")
    await state.set_state(SendMessage.recipient)


@router.message(SendMessage.recipient)
async def recipient(message: types.Message, state: FSMContext):
    if not is_valid_email(message.text):
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å.")
        return

    await state.update_data(recipient=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—è.")
    await state.set_state(SendMessage.subject)


@router.message(SendMessage.subject)
async def subject(message: types.Message, state: FSMContext):
    if not is_non_empty_text(message.text):
        await message.answer("–¢–µ–º–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É.")
        return

    await state.update_data(subject=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
    await state.set_state(SendMessage.sender_message)


@router.message(SendMessage.sender_message)
async def sender_message(message: types.Message, state: FSMContext):
    if not is_non_empty_text(message.text):
        await message.answer("–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return

    await state.update_data(sender_message=message.text)
    data = await state.get_data()
    sender_email = data['sender_email']
    recipient = data['recipient']
    subject = data["subject"]
    sender_message = data['sender_message']

    await message.answer(
        f"–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—ã?\n"
        f"–í–∞—à email - {sender_email}\n"
        f"Email –ø–æ–ª—É—á–∞—Ç–µ–ª—è - {recipient}\n"
        f"–¢–µ–º–∞ —Å–æ–æ–±—â–µ–Ω–∏—è - {subject}\n"
        f"–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - {sender_message}",
        reply_markup=sender_message_keyboard
    )


@router.callback_query(F.data == "send")
async def send(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    sender_email = data['sender_email']
    recipient = data['recipient']
    subject = data["subject"]
    sender_message = data['sender_message']


    if not is_valid_email(sender_email):
        await callback.message.answer("–í–∞—à email –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")
        return

    if not is_valid_email(recipient):
        await callback.message.answer("Email –ø–æ–ª—É—á–∞—Ç–µ–ª—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")
        return

    if not is_non_empty_text(sender_message):
        await callback.message.answer("–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return

    if len(sender_message) > 1000:
        await callback.message.answer(
            f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ!\n–î–ª–∏–Ω–∞ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {len(sender_message)} —Å–∏–º–≤–æ–ª–æ–≤. "
            "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–∞—è –¥–ª–∏–Ω–∞ ‚Äî 1000 —Å–∏–º–≤–æ–ª–æ–≤.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ —Ç–µ–∫—Å—Ç."
        )
        return


    sender = smtp_sender
    password = smtp_password

    server = smtplib.SMTP('smtp.gmail.com', 587)
    server.starttls()

    try:
        server.login(sender, password)
        msg = EmailMessage()
        msg['Subject'] = subject
        msg['From'] = sender_email
        msg['To'] = recipient
        msg.set_content(sender_message)

        server.send_message(msg)

        log_email_to_db(sender_email, recipient, "—É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        log_email(recipient, "—É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")

        cursor.execute("INSERT INTO users VALUES (?, ?, ?, ?)", (callback.message.from_user.id, sender_email, recipient, sender_message))
        conn.commit()

        await callback.message.answer("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")

    except Exception as error:
        log_email_to_db(sender_email, recipient, f"–æ—à–∏–±–∫–∞: {error}")
        log_email(recipient, f"–æ—à–∏–±–∫–∞: {error}")
        await callback.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ {error}!")
        print(f"{error}")

    finally:
        server.quit()
